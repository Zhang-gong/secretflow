// Copyright 2023 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow.pipeline;

import "secretflow/protos/component/comp.proto";

// A node is a building block of a DAG, nodes and edges together forms a DAG.
// similar to NodeEvalParam except IO are ids.
message NodeDef {
  // id of this node, unique per-pipeline.
  string id = 1;

  // domain of component
  string domain = 2;

  // name of component
  string name = 3;

  // version of component
  string version = 4;

  // The attribute value.
  repeated string attr_paths = 5;

  repeated secretflow.component.Attribute attrs = 6;

  repeated string inputs = 7;

  repeated string outputs = 8;
}

// The pipeline(DAG) definition.
message PipelineDef {
  // The id of this pipeline.
  // Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*".
  string id = 1;

  // The node definitions.
  repeated NodeDef nodes = 2;
}

enum State {
  // The default state.
  Staging = 0;

  // For a node, it is connected and the schema is inferenced.
  // For a pipeline, it is about to run.
  Initialized = 1;

  // For a node, it is fired and still running by the backend.
  // For a pipeline, at least one of its nodes is still running.
  Running = 2;

  // Finished, succeed.
  Succeed = 3;

  // Finished, failed.
  Failed = 4;
}

message NodeState {
  // A id of this node, unique within a single DAG.
  // Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*".
  string id = 1;

  // The state of this node.
  State state = 2;
}

message PipelineState {
  // The id of this pipeline.
  // Must match the regexp "[A-Za-z0-9.][A-Za-z0-9_>./]*".
  string id = 1;

  // The state of this node.
  State state = 2;

  // The node states.
  repeated NodeState nodes = 3;
}
